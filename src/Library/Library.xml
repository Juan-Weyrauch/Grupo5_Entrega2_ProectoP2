<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="M:ClassLibrary.Player.UsarItem(System.Int32,ClassLibrary.IPokemon)">
            <summary>
            Usa un ítem del inventario en el Pokémon objetivo.
            </summary>
            <param name="indiceItem">Índice del ítem en el inventario.</param>
            <param name="objetivo">El Pokémon en el cual se usará el ítem.</param>
        </member>
        <member name="M:ClassLibrary.Player.GetInventarioCount">
            <summary>
            Devuelve el conteo de ítems en el inventario.
            </summary>
        </member>
        <member name="M:ClassLibrary.Player.SeleccionarPokemonParaRevivir">
            <summary>
            Selecciona un Pokémon del cementerio para revivir.
            </summary>
        </member>
        <member name="M:ClassLibrary.Player.SeleccionarPokemonDelEquipo">
            <summary>
            Selecciona un Pokémon vivo del equipo para usar un ítem en él.
            </summary>
        </member>
        <member name="F:ClassLibrary.FabricaPokemon.PokedexPokemon">
            <summary>
            Los registros son clases que tienen la informacion de la creacion de cada pokemon. Estos tienen un metodo que
            instancia los pokemons como objetos y los envia hacia las listas, se deberia hacer con visitor.
            </summary>
        </member>
        <member name="M:ClassLibrary.FabricaPokemon.CargarPokemons">
            <summary>
            Implementar el patrón Visitor nos permite definir operaciones en las clases de los Pokémon sin modificar sus clases individuales.
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.StartPrint">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.EndPrint">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.FinDelJuego(System.String)">
            <summary>
             Imprmir cuando se termina el juego con el ganador
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.PlayerName(System.Int32)">
            <summary>
            
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.mostrarListaPokemons(System.String)">
            <summary>
            
            </summary>
            <param name="jugador"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.selectYourPokemon(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.ValorFueraDeRango">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.MostrarPokemons(ClassLibrary.IPlayer)">
            <summary>
            
            </summary>
            <param name="jugador"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.ImprimirEquipo(System.Collections.Generic.List{ClassLibrary.IPokemon})">
            <summary>
            Muestra en consola el equipo actual del Jugador
            </summary>
            <param name="Equipo"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.InsertarNombre(System.Int32)">
            <summary>
            
            </summary>
            <param name="numero"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.Argumentos(System.Int32)">
            <summary>
            
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.TurnoJugador(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Devuelve la eleccion del jugador como cadena de texto.
            </summary>
            <param name="jugador"></param>
            <returns></returns>
        </member>
        <member name="T:Library.Static.Calculator">
            <summary>
            El objetivo de esta calse es realizar cualquier tipo de calculo y devolver el valor adecuado.
            Esto nos sirve para simplificar la lectura del codigo, ya sea de la calse Combate o Fachada,
            que son las clases que mas se fenefician de Calculator. 
            </summary>
        </member>
        <member name="M:Library.Static.Calculator.CombatValidation(ClassLibrary.IPlayer,ClassLibrary.IPlayer)">
            <summary>
            Valida que los jugadores aun tengan pokemones vivios para seguir jugando
            </summary>
            <param name="jugador1"></param>
            <param name="jugador2"></param>
            <returns>boolean</returns>
        </member>
        <member name="M:Library.Static.Calculator.CalcularDañoPorTipo(ClassLibrary.IPokemon,ClassLibrary.IPokemon,ClassLibrary.IAtaque)">
            <summary>
            Calcula el daño total de un ataque. 
            </summary>
            <param name="pokemonActual"></param>
            <param name="pokemonRival"></param>
            <param name="ataqueActual"></param>
            <returns></returns>
        </member>
        <member name="M:Library.Static.Calculator.CheckVida(System.Int32,ClassLibrary.IPokemon)">
            <summary>
            Calcula y devuelve si el pokeom aun sigue con vida.
            </summary>
            <param name="pokemonActual"></param>
            <returns></returns>
        </member>
        <member name="M:ConsoleApplication.Fachada.UsarItemEnCombate(ClassLibrary.IPlayer)">
            <summary>
            Permite al jugador usar un ítem en el flujo del juego.
            </summary>
        </member>
    </members>
</doc>
