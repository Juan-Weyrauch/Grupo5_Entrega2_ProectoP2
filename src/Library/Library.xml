<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="F:ClassLibrary.FabricaPokemon.PokedexPokemon">
            <summary>
            Los registros son clases que tienen la informacion de la creacion de cada pokemon. Estos tienen un metodo que
            instancia los pokemons como objetos y los envia hacia las listas, se deberia hacer con visitor.
            </summary>
        </member>
        <member name="M:ClassLibrary.FabricaPokemon.CargarPokemons">
            <summary>
            Implementar el patrón Visitor nos permite definir operaciones en las clases de los Pokémon sin modificar sus clases individuales.
            </summary>
        </member>
        <member name="T:ClassLibrary.Fachada">
            <summary>
            La clase <c>Fachada</c> es el punto de entrada principal para gestionar el bucle del juego y el proceso de creación de jugadores.
            </summary>
        </member>
        <member name="M:ClassLibrary.Fachada.Start">
            <summary>
            Inicia el bucle principal del juego. Pide al usuario que inicie un nuevo juego creando jugadores o que salga.
            </summary>
        </member>
        <member name="M:ClassLibrary.Fachada.CrearJugador(System.Int32)">
            <summary>
            Crea un jugador con un número especificado, solicitando su nombre y permitiéndole seleccionar Pokémon.
            </summary>
            <param name="playerNumber">El número del jugador (1 o 2) que se está creando.</param>
            <returns>Un objeto <c>Player</c> que representa al jugador creado.</returns>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.StartPrint">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.EndPrint">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.FinDelJuego">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.PlayerName(System.Int32)">
            <summary>
            
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.mostrarListaPokemons(System.String)">
            <summary>
            
            </summary>
            <param name="jugador"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.selectYourPokemon(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.ValorFueraDeRango">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.MostrarPokemons(ClassLibrary.IPlayer)">
            <summary>
            
            </summary>
            <param name="jugador"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.EligePokemonInicial(System.Collections.Generic.List{ClassLibrary.IPokemon})">
            <summary>
            
            </summary>
            <param name="Equipo"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.InsertarNombre(System.Int32)">
            <summary>
            
            </summary>
            <param name="numero"></param>
        </member>
        <member name="M:ClassLibrary.ImpresoraDeTexto.Argumentos(System.Int32)">
            <summary>
            
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Library.Static.Calculator.CombatValidation(ClassLibrary.IPlayer,ClassLibrary.IPlayer)">
            <summary>
            Método para validar el combate entre dos jugadores
            </summary>
            <param name="jugador1"></param>
            <param name="jugador2"></param>
            <returns>boolean</returns>
        </member>
        <member name="M:Library.Static.Calculator.CalcularDañoporTipo(ClassLibrary.IPokemon,ClassLibrary.IPokemon,ClassLibrary.IAtaque)">
            <summary>
            Calcula el daño de un ataque dependiendo de los tipos de los Pokémon
            </summary>
            <param name="PokemonActual"></param>
            <param name="PokemonRival"></param>
            <param name="AtaqueActual"></param>
            <returns>Daño calculado</returns>
        </member>
    </members>
</doc>
